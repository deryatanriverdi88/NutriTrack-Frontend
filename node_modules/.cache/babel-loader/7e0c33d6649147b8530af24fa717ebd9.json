{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Desktop/Projects/NutriTrack-App(Mod-5)/Frontend-NutriTrack/src/Pages/DailyIntake.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport EditDailyIntake from '../Components/EditDailyIntake';\n\nclass DailyIntake extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editForm: false,\n      dailyIntake: {},\n      serving: null,\n      mealType: \"\",\n      dailyIntakes: [],\n      date: new Date().toLocaleDateString()\n    };\n\n    this.handleDeleteClick = (e, dailyIntakeItem) => {\n      console.log(dailyIntakeItem);\n      fetch(\"http://localhost:3000/daily_intakes/\".concat(dailyIntakeItem.id), {\n        method: 'DELETE'\n      }).then(res => {\n        const newArray = this.state.dailyIntakes.filter(dailyIntake => {\n          return dailyIntake.id !== dailyIntakeItem.id;\n        });\n        this.setState({\n          dailyIntakes: newArray\n        });\n      });\n    };\n\n    this.handleEditForm = () => {\n      this.setState({\n        editForm: false\n      });\n    };\n\n    this.handleClick = (e, dailyIntakeItem) => {\n      //  console.log(dailyIntakeItem)\n      this.setState({\n        editForm: !this.state.editForm,\n        dailyIntake: dailyIntakeItem,\n        serving: dailyIntakeItem.serving,\n        mealType: dailyIntakeItem.meal_type\n      });\n    };\n\n    this.handleDateClick = () => {\n      this.setState({\n        date: new Date().toLocaleDateString()\n      });\n      const date = new Date().toLocaleDateString();\n      this.fetchDailyIntake();\n      this.props.history.push(\"/daily-intake/\".concat(date));\n    };\n\n    this.fetchDailyIntake = () => {\n      const config = {\n        method: 'GET',\n        headers: {\n          Authorization: localStorage.token\n        }\n      };\n      fetch('http://localhost:3000/daily_intakes', config).then(res => res.json()).then(dailyIntakeItems => {\n        // console.log(dailyIntakeItems)\n        const newIntakes = dailyIntakeItems.filter(dailyIntake => {\n          if (this.state.date === new Date().toLocaleDateString()) {\n            return dailyIntake.changed_date === this.state.date;\n          } else {\n            return dailyIntake.date === this.state.date;\n          }\n        });\n        this.setState({\n          dailyIntakes: newIntakes\n        });\n      });\n    };\n\n    this.handleChange = e => {\n      // console.log(e.target.value)\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleDateChange = e => {\n      console.log(e.target.value);\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n      this.fetchDailyIntake();\n      this.props.history.push(\"/daily-intake/\".concat(e.target.value));\n    };\n\n    this.handleEditSubmit = e => {\n      e.preventDefault(); // console.log('submit')\n\n      fetch(\"http://localhost:3000/daily_intakes/\".concat(this.state.dailyIntake.id), {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          meal_type: this.state.mealType,\n          serving: this.state.serving\n        })\n      }).then(res => res.json()).then(intake => {\n        const newItem = this.state.dailyIntakes.map(intakeItem => {\n          return intakeItem.id === intake.id ? intake : intakeItem;\n        }); // this.props.setUser(user) \n\n        this.setState({\n          dailyIntake: intake,\n          dailyIntakes: newItem\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchDailyIntake();\n    const date = this.props.match.params.date;\n\n    if (date) {\n      this.setState({\n        date: date\n      });\n    } else {\n      this.setState({\n        date: new Date().toLocaleDateString()\n      });\n    } // debugger\n\n  }\n\n  render() {\n    console.log(this.state.date);\n    const current_user = this.props.current_user;\n\n    const breakfast = () => {\n      if (this.state.dailyIntakes) {\n        let arr = this.state.dailyIntakes.filter(dailyIntake => {\n          return dailyIntake.meal_type === 'breakfast';\n        });\n        return arr.map(dailyIntake => {\n          return React.createElement(\"tr\", {\n            key: dailyIntake.food.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159\n            },\n            __self: this\n          }, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, \" \", dailyIntake.food.name, \" \", dailyIntake.changed_date, \" \", React.createElement(\"button\", {\n            className: \"edit-intake\",\n            onClick: e => this.handleClick(e, dailyIntake),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, \" Edit \")), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }, dailyIntake.serving, \" \\u2716\\uFE0F  (\", dailyIntake.food.serving_size, \" g)\"), React.createElement(\"td\", {\n            className: \"calorie\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }, \" \", dailyIntake.food.calorie * dailyIntake.serving), React.createElement(\"td\", {\n            className: \"fat\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.fat * dailyIntake.serving).toFixed(2), \" \"), React.createElement(\"td\", {\n            className: \"carbs\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.carbs * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"protein\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.protein * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"sugar\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.sugar * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"delete\",\n            onClick: e => this.handleDeleteClick(e, dailyIntake),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167\n            },\n            __self: this\n          }, \" \", React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167\n            },\n            __self: this\n          }, \" \\u274C \"), \" \"));\n        });\n      }\n\n      return \"There is no food logged in..\";\n    };\n\n    const lunch = () => {\n      if (this.state.dailyIntakes) {\n        let arr = this.state.dailyIntakes.filter(dailyIntake => {\n          return dailyIntake.meal_type === 'lunch';\n        });\n        return arr.map(dailyIntake => {\n          return React.createElement(\"tr\", {\n            key: dailyIntake.food.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180\n            },\n            __self: this\n          }, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }, \"  \", dailyIntake.food.name, \" \", dailyIntake.changed_date, \" \", React.createElement(\"button\", {\n            className: \"editIntake\",\n            onClick: e => this.handleClick(e, dailyIntake),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }, \" Edit \")), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }, dailyIntake.serving, \" \\u2716\\uFE0F  (\", dailyIntake.food.serving_size, \" g)\"), React.createElement(\"td\", {\n            className: \"calorie\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183\n            },\n            __self: this\n          }, \" \", dailyIntake.food.calorie * dailyIntake.serving), React.createElement(\"td\", {\n            className: \"fat\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 184\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.fat * dailyIntake.serving).toFixed(2), \" \"), React.createElement(\"td\", {\n            className: \"carbs\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.carbs * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"protein\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.protein * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"sugar\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.sugar * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"delete\",\n            onClick: e => this.handleDeleteClick(e, dailyIntake),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 188\n            },\n            __self: this\n          }, \" \", React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 188\n            },\n            __self: this\n          }, \" \\u274C \"), \" \"));\n        });\n      }\n\n      return \"There is no food logged in..\";\n    };\n\n    const dinner = () => {\n      if (this.state.dailyIntakes) {\n        let arr = this.state.dailyIntakes.filter(dailyIntake => {\n          return dailyIntake.meal_type === 'dinner';\n        });\n        return arr.map(dailyIntake => {\n          return React.createElement(\"tr\", {\n            key: dailyIntake.food.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202\n            },\n            __self: this\n          }, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }, \" \", dailyIntake.food.name, \" \", dailyIntake.changed_date, React.createElement(\"button\", {\n            className: \"edit-intake\",\n            onClick: e => this.handleClick(e, dailyIntake),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }, \" Edit \"), \" \"), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }, dailyIntake.serving, \" \\u2716\\uFE0F  (\", dailyIntake.food.serving_size, \" g)\"), React.createElement(\"td\", {\n            className: \"calorie\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }, \" \", dailyIntake.food.calorie * dailyIntake.serving), React.createElement(\"td\", {\n            className: \"fat\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.fat * dailyIntake.serving).toFixed(2), \" \"), React.createElement(\"td\", {\n            className: \"carbs\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.carbs * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"protein\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 208\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.protein * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"sugar\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 209\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.sugar * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            onClick: e => this.handleDeleteClick(e, dailyIntake),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 210\n            },\n            __self: this\n          }, \" \", React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 210\n            },\n            __self: this\n          }, \" \\u274C \"), \" \"));\n        });\n      }\n\n      return \"There is no food logged in..\";\n    };\n\n    const snacks = () => {\n      if (this.state.dailyIntakes) {\n        let arr = this.state.dailyIntakes.filter(dailyIntake => {\n          return dailyIntake.meal_type === 'snack';\n        });\n        return arr.map(dailyIntake => {\n          // debugger\n          return React.createElement(\"tr\", {\n            key: dailyIntake.food.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227\n            },\n            __self: this\n          }, React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 229\n            },\n            __self: this\n          }, \" \", dailyIntake.food.name, \" \", dailyIntake.changed_date, \" \", React.createElement(\"button\", {\n            className: \"edit-intake\",\n            onClick: e => this.handleClick(e, dailyIntake),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 229\n            },\n            __self: this\n          }, \" Edit \")), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230\n            },\n            __self: this\n          }, \" \", dailyIntake.serving, \" \\u2716\\uFE0F (\", dailyIntake.food.serving_size, \" g)\"), React.createElement(\"td\", {\n            className: \"calorie\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 231\n            },\n            __self: this\n          }, \" \", dailyIntake.food.calorie * dailyIntake.serving), React.createElement(\"td\", {\n            className: \"fat\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.fat * dailyIntake.serving).toFixed(2), \" \"), React.createElement(\"td\", {\n            className: \"carbs\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.carbs * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"protein\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 234\n            },\n            __self: this\n          }, \" \", (dailyIntake.food.protein * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"sugar\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235\n            },\n            __self: this\n          }, \"  \", (dailyIntake.food.sugar * dailyIntake.serving).toFixed(2)), React.createElement(\"td\", {\n            className: \"deleteIntake\",\n            width: \"10%\",\n            onClick: e => this.handleDeleteClick(e, dailyIntake),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 237\n            },\n            __self: this\n          }, \" \", React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 237\n            },\n            __self: this\n          }, \" \\u274C \"), \" \"));\n        });\n      }\n\n      return \"There is no food logged in..\";\n    };\n\n    const totals = () => {\n      let totals = {\n        protein: 0,\n        sugar: 0,\n        carbs: 0,\n        fat: 0,\n        servings: 0,\n        calories: 0\n      };\n\n      if (this.state.dailyIntakes.length) {\n        this.state.dailyIntakes.forEach(i => {\n          totals.servings += i.serving;\n          totals.protein += i.total_protein;\n          totals.sugar += i.total_sugar;\n          totals.carbs += i.total_carbs;\n          totals.fat += i.total_fat;\n          totals.calories += i.total_calories;\n        });\n      }\n\n      return totals;\n    };\n\n    const remaining = () => {\n      let total = {\n        protein: 0,\n        sugar: 0,\n        carbs: 0,\n        fat: 0,\n        calories: 0\n      };\n\n      if (this.state.dailyIntakes.length) {\n        this.state.dailyIntakes.forEach(i => {\n          // debugger\n          total.calories = current_user.goal_calorie - totals().calories;\n          total.protein = current_user.goal_protein - totals().protein;\n          total.sugar = current_user.goal_sugar - totals().sugar;\n          total.carbs = current_user.goal_carbs - totals().carbs;\n          total.fat = current_user.goal_fat - totals().fat;\n        });\n      }\n\n      return total;\n    };\n\n    return React.createElement(\"div\", {\n      className: \"daily-intake\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"select-day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \" Select a date\"), React.createElement(\"input\", {\n      type: \"date\",\n      className: \"date\",\n      value: this.state.date,\n      onChange: this.handleDateChange,\n      name: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"date today\",\n      onClick: this.handleDateClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Today :\", this.state.date, \" \"), this.state.editForm ? React.createElement(EditDailyIntake, {\n      intake: this.state.dailyIntake,\n      handleClick: this.handleEditForm,\n      handleChange: this.handleChange,\n      handleEditSubmit: this.handleEditSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }) : null, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      width: \"20%\",\n      style: {\n        border: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(\"th\", {\n      width: \"10%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Serving\"), React.createElement(\"th\", {\n      className: \"calorie\",\n      width: \"10%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Calorie ( kcal )\"), React.createElement(\"th\", {\n      width: \"10%\",\n      className: \"fat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Fat ( g )\"), React.createElement(\"th\", {\n      width: \"10%\",\n      className: \"carbs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Carbs ( g )\"), React.createElement(\"th\", {\n      width: \"10%\",\n      className: \"protein\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Protein ( g )\"), React.createElement(\"th\", {\n      width: \"10%\",\n      className: \"sugar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Sugar ( g )\"), React.createElement(\"th\", {\n      width: \"1%\",\n      style: {\n        border: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      width: \"0%\",\n      className: \"breakfast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"Breakfast\")), breakfast(), React.createElement(\"tr\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      width: \"10%\",\n      className: \"lunch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Lunch\")), lunch(), React.createElement(\"tr\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      width: \"10%\",\n      className: \"dinnr\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Dinner\")), dinner(), React.createElement(\"tr\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      width: \"10%\",\n      className: \"breakfast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"Snack\")), snacks(), React.createElement(\"tr\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), React.createElement(\"tr\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Total\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, totals().servings), React.createElement(\"td\", {\n      className: \"calorie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, totals().calories), React.createElement(\"td\", {\n      className: \"fat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, totals().fat.toFixed(2)), React.createElement(\"td\", {\n      className: \"carbs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, totals().carbs.toFixed(2)), React.createElement(\"td\", {\n      className: \"protein\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, totals().protein.toFixed(2)), React.createElement(\"td\", {\n      className: \"sugar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, totals().sugar.toFixed(2))), React.createElement(\"tr\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"Your daily goal  \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      className: \"calorie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, current_user.goal_calorie), React.createElement(\"td\", {\n      className: \"fat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, current_user.goal_fat), React.createElement(\"td\", {\n      className: \"carbs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, current_user.goal_carbs), React.createElement(\"td\", {\n      className: \"protein\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, current_user.goal_protein), React.createElement(\"td\", {\n      className: \"sugar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, current_user.goal_sugar)), React.createElement(\"tr\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"Remaining \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      className: \"calorie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, remaining().calories), React.createElement(\"td\", {\n      className: \"fat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, remaining().fat.toFixed(2)), React.createElement(\"td\", {\n      className: \"carbs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, remaining().carbs.toFixed(2)), React.createElement(\"td\", {\n      className: \"protein\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, remaining().protein.toFixed(2)), React.createElement(\"td\", {\n      className: \"sugar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, remaining().sugar.toFixed(2))))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: userObject => {\n      dispatch({\n        type: 'SET_USER',\n        payload: userObject\n      });\n    },\n    clearUser: () => {\n      dispatch({\n        type: 'CLEAR_USER'\n      });\n    }\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    current_user: state.user\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DailyIntake);","map":{"version":3,"sources":["/Users/flatironschool/Desktop/Projects/NutriTrack-App(Mod-5)/Frontend-NutriTrack/src/Pages/DailyIntake.js"],"names":["React","Component","connect","EditDailyIntake","DailyIntake","state","editForm","dailyIntake","serving","mealType","dailyIntakes","date","Date","toLocaleDateString","handleDeleteClick","e","dailyIntakeItem","console","log","fetch","id","method","then","res","newArray","filter","setState","handleEditForm","handleClick","meal_type","handleDateClick","fetchDailyIntake","props","history","push","config","headers","Authorization","localStorage","token","json","dailyIntakeItems","newIntakes","changed_date","handleChange","target","name","value","handleDateChange","handleEditSubmit","preventDefault","body","JSON","stringify","intake","newItem","map","intakeItem","componentDidMount","match","params","render","current_user","breakfast","arr","food","serving_size","calorie","fat","toFixed","carbs","protein","sugar","lunch","dinner","snacks","totals","servings","calories","length","forEach","i","total_protein","total_sugar","total_carbs","total_fat","total_calories","remaining","total","goal_calorie","goal_protein","goal_sugar","goal_carbs","goal_fat","border","mapDispatchToProps","dispatch","setUser","userObject","type","payload","clearUser","mapStateToProps","user"],"mappings":"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","sourcesContent":["  \nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport EditDailyIntake from '../Components/EditDailyIntake'\n\nclass DailyIntake extends Component {\n state = {\n   editForm: false, \n   dailyIntake: {},\n   serving: null,\n   mealType: \"\", \n   dailyIntakes: [],\n   date: new Date().toLocaleDateString()\n }\n\n\n\n\nhandleDeleteClick = (e, dailyIntakeItem) => {\n   console.log(dailyIntakeItem)\n   fetch(`http://localhost:3000/daily_intakes/${dailyIntakeItem.id}`, {\n         method: 'DELETE'\n       }).then(res => {\n         const newArray = this.state.dailyIntakes.filter(dailyIntake =>{\n           return dailyIntake.id !== dailyIntakeItem.id\n          })\n          this.setState({\n           dailyIntakes: newArray\n         })\n       })\n     \n}\n\nhandleEditForm = () =>{\n  this.setState({\n    editForm: false\n  })\n}\n\n\nhandleClick = (e, dailyIntakeItem) => {\n//  console.log(dailyIntakeItem)\n this.setState({\n   editForm: !this.state.editForm,\n   dailyIntake: dailyIntakeItem,\n   serving: dailyIntakeItem.serving,\n   mealType: dailyIntakeItem.meal_type\n })\n}\n\nhandleDateClick = () =>{\n  this.setState({\n    date: new Date().toLocaleDateString() \n  })\n  const date = new Date().toLocaleDateString()\n  this.fetchDailyIntake()\n  this.props.history.push(`/daily-intake/${date}`)\n}\n\ncomponentDidMount(){\n  this.fetchDailyIntake()\n  const date = this.props.match.params.date \n  if ( date ) {\n    this.setState({\n      date: date\n    })\n  } else {\n    this.setState({\n      date: new Date().toLocaleDateString()\n    })\n  }\n  // debugger\n}\n\nfetchDailyIntake =  () => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: localStorage.token\n    }\n  }\n  fetch('http://localhost:3000/daily_intakes', config)\n  .then(res => res.json())\n  .then(dailyIntakeItems => {\n    // console.log(dailyIntakeItems)\n    \n   const newIntakes = dailyIntakeItems.filter(dailyIntake => {\n     if (this.state.date === new Date().toLocaleDateString()) {\n       return dailyIntake.changed_date === this.state.date\n      } else {\n        return  dailyIntake.date === this.state.date\n      }\n   })\n        this.setState({\n          dailyIntakes: newIntakes\n        })\n \n  })\n}\n\nhandleChange = (e) =>{\n  // console.log(e.target.value)\n  this.setState({\n    [e.target.name]: e.target.value\n  })\n}\n\nhandleDateChange = (e) => {\n  console.log(e.target.value)\n  this.setState({\n    [e.target.name]: e.target.value\n  })\n  this.fetchDailyIntake()\n \n  this.props.history.push(`/daily-intake/${e.target.value}`)\n}\n\nhandleEditSubmit = (e) => {\n  e.preventDefault()\n  // console.log('submit')\n  fetch(`http://localhost:3000/daily_intakes/${this.state.dailyIntake.id}`, {\n    method: 'PATCH', \n    headers: {\n      'Content-Type': 'application/json',\n      'Accept':'application/json'\n    },\n    body: JSON.stringify({ \n     meal_type: this.state.mealType,\n     serving: this.state.serving\n    })\n  })\n  .then(res => res.json())\n  .then(intake => {\n    const newItem =  this.state.dailyIntakes.map(intakeItem => {\n        return intakeItem.id === intake.id ? intake : intakeItem\n    })\n    // this.props.setUser(user) \n    this.setState({\n      dailyIntake:  intake,\n      dailyIntakes:  newItem\n    })\n  })\n} \n\n render() {\n\n  \n  console.log(this.state.date)\n \n\n   const  {current_user} =this.props\n\n    const breakfast = () => {\n        if(this.state.dailyIntakes) {\n            let arr = this.state.dailyIntakes.filter(dailyIntake => {\n                return dailyIntake.meal_type === 'breakfast'\n            }) \n            return arr.map(dailyIntake => {\n                return  <tr key={dailyIntake.food.id} >\n                  <td> {dailyIntake.food.name } {dailyIntake.changed_date} <button className=\"edit-intake\" onClick={(e) => this.handleClick(e, dailyIntake)}> Edit </button></td> \n                  <td>{dailyIntake.serving} ✖️  ({dailyIntake.food.serving_size} g)</td>\n                  <td className=\"calorie\"> {dailyIntake.food.calorie * dailyIntake.serving}</td> \n                  <td className=\"fat\"> {(dailyIntake.food.fat * dailyIntake.serving).toFixed(2)} </td> \n                  <td className=\"carbs\"> {(dailyIntake.food.carbs * dailyIntake.serving).toFixed(2)}</td> \n                  <td className=\"protein\"> {(dailyIntake.food.protein * dailyIntake.serving).toFixed(2)}</td> \n                  <td className=\"sugar\"> {(dailyIntake.food.sugar * dailyIntake.serving).toFixed(2)}</td>\n                  <td className=\"delete\" onClick={(e) => this.handleDeleteClick(e, dailyIntake)}> <span> ❌ </span> </td>\n                  </tr>\n             })\n           }\n           return \"There is no food logged in..\"\n        }\n\n    const lunch = () => {\n        if(this.state.dailyIntakes) {\n            let arr = this.state.dailyIntakes.filter(dailyIntake => {\n                return dailyIntake.meal_type === 'lunch'\n            }) \n            return arr.map(dailyIntake => {\n                return  <tr key={dailyIntake.food.id}>\n                  <td>  {dailyIntake.food.name } {dailyIntake.changed_date} <button className=\"editIntake\" onClick={(e) => this.handleClick(e, dailyIntake)}> Edit </button></td> \n                  <td>{dailyIntake.serving} ✖️  ({dailyIntake.food.serving_size} g)</td>\n                  <td className=\"calorie\"> {dailyIntake.food.calorie * dailyIntake.serving}</td> \n                  <td className=\"fat\"> {(dailyIntake.food.fat * dailyIntake.serving).toFixed(2)} </td> \n                  <td className=\"carbs\"> {(dailyIntake.food.carbs * dailyIntake.serving).toFixed(2)}</td> \n                  <td className=\"protein\"> {(dailyIntake.food.protein * dailyIntake.serving).toFixed(2)}</td> \n                  <td className=\"sugar\"> {(dailyIntake.food.sugar * dailyIntake.serving).toFixed(2)}</td>\n                  <td className=\"delete\" onClick={(e) => this.handleDeleteClick(e, dailyIntake)}> <span> ❌ </span> </td>\n                </tr>\n             })\n           }\n           return \"There is no food logged in..\"\n        }\n\n    const dinner = () => {\n        if(this.state.dailyIntakes )  {\n            let arr = this.state.dailyIntakes.filter(dailyIntake => {\n                return dailyIntake.meal_type === 'dinner'\n\n            }) \n            return arr.map(dailyIntake => {\n                return  <tr key={dailyIntake.food.id} >\n                  <td> {dailyIntake.food.name } {dailyIntake.changed_date}<button className=\"edit-intake\" onClick={(e) => this.handleClick(e, dailyIntake)}> Edit </button> </td>\n            <td>{dailyIntake.serving} ✖️  ({dailyIntake.food.serving_size} g)</td>\n                  <td className=\"calorie\"> {dailyIntake.food.calorie * dailyIntake.serving}</td> \n                  <td className=\"fat\"> {(dailyIntake.food.fat * dailyIntake.serving).toFixed(2)} </td> \n                  <td className=\"carbs\"> {(dailyIntake.food.carbs * dailyIntake.serving).toFixed(2)}</td> \n                  <td className=\"protein\"> {(dailyIntake.food.protein * dailyIntake.serving).toFixed(2)}</td> \n                  <td className=\"sugar\"> {(dailyIntake.food.sugar * dailyIntake.serving).toFixed(2)}</td>\n                  <td  onClick={(e) => this.handleDeleteClick(e, dailyIntake)}> <span> ❌ </span> </td>\n                \n                </tr>\n              \n             })\n           }\n           return \"There is no food logged in..\"\n        }\n\n    const snacks = () => {\n        if(this.state.dailyIntakes) {\n            let arr = this.state.dailyIntakes.filter(dailyIntake => {\n                return dailyIntake.meal_type === 'snack'\n            }) \n           \n            return arr.map(dailyIntake => {\n              // debugger\n                return  <tr key={dailyIntake.food.id} >\n                  \n                <td> {dailyIntake.food.name } {dailyIntake.changed_date} <button className=\"edit-intake\" onClick={(e) => this.handleClick(e, dailyIntake)}> Edit </button></td> \n                <td> {dailyIntake.serving} ✖️ ({dailyIntake.food.serving_size} g)</td>\n                <td className=\"calorie\"> {dailyIntake.food.calorie * dailyIntake.serving}</td> \n                <td className=\"fat\"> {(dailyIntake.food.fat * dailyIntake.serving).toFixed(2)} </td> \n                <td className=\"carbs\"> {(dailyIntake.food.carbs * dailyIntake.serving).toFixed(2)}</td> \n                <td className=\"protein\"> {(dailyIntake.food.protein * dailyIntake.serving).toFixed(2)}</td> \n                <td className=\"sugar\">  {(dailyIntake.food.sugar * dailyIntake.serving).toFixed(2)}</td>\n               \n                <td className=\"deleteIntake\" width=\"10%\" onClick={(e) => this.handleDeleteClick(e, dailyIntake)}> <span> ❌ </span> </td>\n                </tr>\n             })\n           }\n           return \"There is no food logged in..\"\n        }\n\n        const totals = () => {\n          let totals = {\n            protein: 0,\n            sugar: 0,\n            carbs: 0,\n            fat: 0,\n            servings: 0,\n            calories: 0\n          }\n          if (this.state.dailyIntakes.length){\n            this.state.dailyIntakes.forEach((i) => {\n              totals.servings += i.serving\n              totals.protein += i.total_protein\n              totals.sugar += i.total_sugar \n              totals.carbs += i.total_carbs\n              totals.fat += i.total_fat\n              totals.calories += i.total_calories\n            })\n          }\n         return totals\n      }      \n      \n      \n      const remaining = () => {\n        let total = {\n          protein: 0,\n          sugar: 0,\n          carbs: 0,\n          fat: 0,\n          calories: 0\n        }\n        if (this.state.dailyIntakes.length){\n             \n          this.state.dailyIntakes.forEach((i) => {\n            // debugger\n            total.calories = current_user.goal_calorie - totals().calories\n            total.protein = current_user.goal_protein - totals().protein\n            total.sugar = current_user.goal_sugar - totals().sugar\n            total.carbs = current_user.goal_carbs - totals().carbs\n            total.fat = current_user.goal_fat - totals().fat\n             \n    \n          })\n        }\n     \n       return total\n       \n    }\n    \n  return(\n<div className=\"daily-intake\">\n <p className='select-day'> Select a date</p> \n <input type=\"date\" className=\"date\" value={this.state.date} onChange={this.handleDateChange} name=\"date\" />\n  \n  <button className=\"date today\"onClick={this.handleDateClick}>Today :{this.state.date} </button>\n\n{ this.state.editForm ?  <EditDailyIntake intake={this.state.dailyIntake} handleClick={this.handleEditForm }handleChange={this.handleChange} handleEditSubmit={this.handleEditSubmit} /> : null }\n\n<table >\n    <thead>\n     <tr className=\"row\">\n        <th width=\"20%\" style={{border: 'none'}}></th> \n        <th width=\"10%\">Serving</th>\n        <th className=\"calorie\"  width=\"10%\">Calorie ( kcal )</th> \n       \n        <th width=\"10%\" className=\"fat\">Fat ( g )</th>\n        <th width=\"10%\" className=\"carbs\">Carbs ( g )</th>\n        <th width=\"10%\" className=\"protein\">Protein ( g )</th>\n        <th width=\"10%\" className=\"sugar\">Sugar ( g )</th>\n        <th width=\"1%\" style={{border: 'none'}}></th>\n       \n     </tr>\n    </thead>\n    <tbody>\n        \n    <tr className=\"row\">\n      <th width=\"0%\" className=\"breakfast\">Breakfast</th>\n    </tr> \n      {breakfast() }\n      \n      \n    <tr className=\"row\">\n      <th width=\"10%\" className=\"lunch\">Lunch</th> \n    </tr>\n     {lunch()}\n    <tr className=\"row\">\n      <th width=\"10%\" className=\"dinnr\">Dinner</th> \n    </tr>\n     {dinner()}\n  \n    <tr className=\"row\">\n      <th width=\"10%\" className=\"breakfast\">Snack</th> \n    </tr>\n      {snacks()} \n     <tr className=\"row\">\n       </tr> \n    <tr className=\"row\">\n      \n      <th>\n        Total\n      </th>\n\n        <td>{(totals().servings)}</td>\n        <td className=\"calorie\">{(totals().calories)}</td>\n        <td className=\"fat\">{(totals().fat).toFixed(2)}</td>\n        <td className=\"carbs\">{(totals().carbs).toFixed(2)}</td>\n        <td className=\"protein\">{(totals().protein).toFixed(2)}</td>\n        <td className=\"sugar\">{(totals().sugar).toFixed(2)}</td>\n        \n    </tr>\n    <tr className=\"row\">\n      <th>Your daily goal  </th>\n      <td></td>\n      <td className=\"calorie\">{current_user.goal_calorie}</td>\n      <td className=\"fat\">{current_user.goal_fat}</td>\n      <td className=\"carbs\">{current_user.goal_carbs}</td>\n      <td className=\"protein\">{current_user.goal_protein}</td>\n      <td className=\"sugar\">{current_user.goal_sugar}</td>\n    </tr>\n    <tr className=\"row\">\n    <th>Remaining </th>\n   \n    <td></td>\n      <td className=\"calorie\">{remaining().calories}</td>\n      <td className=\"fat\">{(remaining().fat).toFixed(2)}</td>\n      <td className=\"carbs\">{(remaining().carbs).toFixed(2)}</td>\n      <td className=\"protein\">{(remaining().protein).toFixed(2)}</td>\n      <td className=\"sugar\">{(remaining().sugar).toFixed(2)}</td>\n    \n    </tr>\n    </tbody>\n </table>\n </div>\n    )\n   }\n }\n\n const mapDispatchToProps = (dispatch) =>{\n return {\n  setUser: (userObject) => {\n    dispatch({\n        type: 'SET_USER', payload: userObject\n      })\n  }, \n  clearUser: () => {\n   dispatch({\n     type: 'CLEAR_USER'\n   })\n  }\n}\n}\n\nconst mapStateToProps = (state) => {\nreturn {\n  current_user: state.user\n}\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DailyIntake)"]},"metadata":{},"sourceType":"module"}